cmake_minimum_required(VERSION 2.8)

project(LightingIO)

set(CMAKE_CONFIG_DIR ${CMAKE_SOURCE_DIR}/cmake_config)

include(${CMAKE_CONFIG_DIR}/include_path.cmake)
include(${CMAKE_CONFIG_DIR}/package_deps.cmake)
#include(${CMAKE_CONFIG_DIR}/googletest.cmake)
include(${CMAKE_CONFIG_DIR}/global_config.cmake)

IF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE RelWithDebInfo)
ENDIF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

# Select flags.
SET(CMAKE_CXX_FLAGS "-Wall -fno-rtti")
SET(CMAKE_CXX_FLAGS_RELEASE "-O2")
SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")

#SET(CMAKE_BUILD_TYPE Release CACHE STRING "set build type to Release")
#SET(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "CONFIG TO Release" FORCE)
#SET(CMAKE_CXX_FLAGS_RELEASE "-O2")
#SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -g")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# add a default linked path to build/lib
LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/lib)


ADD_SUBDIRECTORY(thirdparty)
ADD_SUBDIRECTORY(base)
ADD_SUBDIRECTORY(net)
#ADD_SUBDIRECTORY(lighting)
ADD_SUBDIRECTORY(example)
ADD_SUBDIRECTORY(app)


MESSAGE(STATUS "This is BINARY dir " ${LightingIO_BINARY_DIR})
MESSAGE(STATUS "This is SOURCE dir " ${LightingIO_SOURCE_DIR})
MESSAGE(STATUS "This is CMAKE lib output dir " ${LIBRARY_OUTPUT_PATH})
MESSAGE(STATUS "This is CMAKE binary output dir " ${EXECUTABLE_OUTPUT_PATH})
